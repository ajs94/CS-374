Script started on Fri 29 Sep 2017 11:07:07 AM EDT
ajs94@kay:~/CS374/Homework3/firestarter$ cat firestarter.cmake[K
make: 'Fire' is up to date.
ajs94@kay:~/CS374/Homework3/firestarter$ makecat firestarter.c
/* firestarter.c 
 * by David Joiner 
 * edit by Aaron Santucci for CS 374 at Calvin College
 * Usage: Fire [forestSize(20)] [numTrials(5000)] * [numProbabilities(101)] [showGraph(1)]
 */
#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include "X-graph.h"

#define UNBURNT 0
#define SMOLDERING 1
#define BURNING 2
#define BURNT 3

#define true 1
#define false 0

typedef int boolean;

extern void seed_by_time(int);
extern int ** allocate_forest(int);
extern void initialize_forest(int, int **);
extern double get_percent_burned(int, int **);
extern void delete_forest(int, int **);
extern void light_tree(int, int **,int,int);
extern boolean forest_is_burning(int, int **);
extern void forest_burns(int, int **,double);
extern int burn_until_out(int,int **,double,int,int);
extern void print_forest(int, int **);

int main(int argc, char ** argv) {
    // initial conditions and variable definitions
    int forest_size=20;
    double * prob_spread;
    double prob_min=0.0;
    double prob_max=1.0;
    double prob_step;
    int **forest;
    double * percent_burned;
    int i_trial;
    int n_trials=5000;
    int i_prob;
    int n_probs=101;
    int do_display=1;
    // xgraph thegraph;
	
	// project 3 variables
	int id = -1, numProcesses = -1; 
	double * total_percent;
	double * total_burned;
	double * burn_count;

    // check command line arguments

    if (argc > 1) {
        sscanf(argv[1],"%d",&forest_size);
    }
    if (argc > 2) {
        sscanf(argv[2],"%d",&n_trials);
    }
    if (argc > 3) {
        sscanf(argv[3],"%d",&n_probs);
    }
    if (argc > 4) {
        sscanf(argv[4],"%d",&do_display);
    }
    if (do_display!=0) do_display=1;
	
	double startTime = 0.0, totalTime = 0.0;
    startTime = MPI_Wtime();
	
	// setup problem
    seed_by_time(0);
    forest=allocate_forest(forest_size);
    prob_spread = (double *) malloc (n_probs*sizeof(double));
    percent_burned = (double *) malloc (n_probs*sizeof(double));
	burn_count = (double *) malloc (n_probs*sizeof(double));
	total_percent = (double *) malloc (n_probs*sizeof(double));
    total_burned = (double *) malloc (n_probs*sizeof(double));
	
	prob_step = (prob_max-prob_min)/(double)(n_probs-1);

	// MPI setup
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &id);
	MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);
	
	for (i_prob = 0 ; i_prob < n_probs; i_prob++) {
        //for a number of trials, calculate average
        //percent burn
        prob_spread[i_prob] = prob_min + (double)i_prob * prob_step;
        percent_burned[i_prob]=0.0;
        for (i_trial=id; i_trial < n_trials; i_trial+=numProcesses) {
            //burn until fire is gone
            burn_count[i_prob] += burn_until_out(forest_size,forest,prob_spread[i_prob],
                forest_size/2,forest_size/2);
            percent_burned[i_prob]+=get_percent_burned(forest_size,forest);
        }     
    }
	
	// reduce for averages
	MPI_Reduce(burn_count, total_burned, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
	MPI_Reduce(percent_burned, total_percent, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
	
	MPI_Finalize();
	
	// process 0 printing ops
	if (id==0)
	{
		printf("Probability of fire spreading, Average percent burned, Number of Iterations\n");
		for (i_prob = 0 ; i_prob < n_probs; i_prob++) {
			total_percent[i_prob]/=n_trials;
			total_burned[i_prob]/=n_trials;
			printf("%lf	\t%lf\t%lf\n",prob_spread[i_prob],
				total_percent[i_prob], total_burned[i_prob]);
		}
		totalTime = MPI_Wtime() - startTime;
		printf("Finished in time %f secs.\n", totalTime);
	}

    // clean up
    delete_forest(forest_size,forest);
    free(prob_spread);
    free(percent_burned);
    return 0;
}

#include <time.h>

void seed_by_time(int offset) {
    time_t the_time;
    time(&the_time);
    srand((int)the_time+offset);
}

int burn_until_out(int forest_size,int ** forest, double prob_spread,
    int start_i, int start_j) {
    int count;

    initialize_forest(forest_size,forest);
    light_tree(forest_size,forest,start_i,start_j);

    // burn until fire is gone
    count = 0;
    while(forest_is_burning(forest_size,forest)) {
        forest_burns(forest_size,forest,prob_spread);
        count++;
    }

    return count;
}

double get_percent_burned(int forest_size,int ** forest) {
    int i,j;
    int total = forest_size*forest_size-1;
    int sum=0;

    // calculate pecrent burned
    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                sum++;
            }
        }
    }

    // return percent burned;
    return ((double)(sum-1)/(double)total);
}


int ** allocate_forest(int forest_size) {
    int i;
    int ** forest;

    forest = (int **) malloc (sizeof(int*)*forest_size);
    for (i=0;i<forest_size;i++) {
        forest[i] = (int *) malloc (sizeof(int)*forest_size);
    }

    return forest;
}

void initialize_forest(int forest_size, int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            forest[i][j]=UNBURNT;
        }
    }
}

void delete_forest(int forest_size, int ** forest) {
    int i;

    for (i=0;i<forest_size;i++) {
        free(forest[i]);
    }
    free(forest);
}

void light_tree(int forest_size, int ** forest, int i, int j) {
    forest[i][j]=SMOLDERING;
}

boolean fire_spreads(double prob_spread) {
    if ((double)rand()/(double)RAND_MAX < prob_spread) 
        return true;
    else
        return false;
}

void forest_burns(int forest_size, int **forest,double prob_spread) {
    int i,j;
    extern boolean fire_spreads(double);

    //burning trees burn down, smoldering trees ignite
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) forest[i][j]=BURNT;
            if (forest[i][j]==SMOLDERING) forest[i][j]=BURNING;
        }
    }

    //unburnt trees catch fire
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) {
                if (i!=0) { // North
                    if (fire_spreads(prob_spread)&&forest[i-1][j]==UNBURNT) {
                        forest[i-1][j]=SMOLDERING;
                    }
                }
                if (i!=forest_size-1) { //South
                    if (fire_spreads(prob_spread)&&forest[i+1][j]==UNBURNT) {
                        forest[i+1][j]=SMOLDERING;
                    }
                }
                if (j!=0) { // West
                    if (fire_spreads(prob_spread)&&forest[i][j-1]==UNBURNT) {
                        forest[i][j-1]=SMOLDERING;
                    }
                }
                if (j!=forest_size-1) { // East
                    if (fire_spreads(prob_spread)&&forest[i][j+1]==UNBURNT) {
                        forest[i][j+1]=SMOLDERING;
                    }
                }
            }
        }
    }
}

boolean forest_is_burning(int forest_size, int ** forest) {
    int i,j;

    for (i=0; i<forest_size; i++) {
        for (j=0; j<forest_size; j++) {
            if (forest[i][j]==SMOLDERING||forest[i][j]==BURNING) {
                return true;
            }
        }
    }
    return false;
}

void print_forest(int forest_size,int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                printf(".");
            } else {
                printf("X");
            }
        }
        printf("\n");
    }
}
ajs94@kay:~/CS374/Homework3/firestarter$ cat firestarter.c             ajs94_proj03_32_8.o13932 
Probability of fire spreading, Average percent burned, Number of Iterations
0.000000		0.000000	2.000000
0.010000		0.000124	2.049600
0.020000		0.000261	2.104000
0.030000		0.000429	2.171200
0.040000		0.000221	2.088000
0.050000		0.000349	2.092800
0.060000		0.000690	2.225600
0.070000		0.000998	2.350400
0.080000		0.001440	2.427200
0.090000		0.001788	2.681600
0.100000		0.002009	2.691200
0.110000		0.001175	2.388800
0.120000		0.001512	2.526400
0.130000		0.002206	2.748800
0.140000		0.002891	3.025600
0.150000		0.002863	2.796800
0.160000		0.003152	2.950400
0.170000		0.002270	2.832000
0.180000		0.002743	2.929600
0.190000		0.001620	2.484800
0.200000		0.004343	3.296000
0.210000		0.004054	3.355200
0.220000		0.003753	3.262400
0.230000		0.005562	3.598400
0.240000		0.006925	3.899200
0.250000		0.007840	3.870400
0.260000		0.009700	4.323200
0.270000		0.007218	3.716800
0.280000		0.006380	3.643200
0.290000		0.009412	4.372800
0.300000		0.019052	5.811200
0.310000		0.020511	6.046400
0.320000		0.018382	5.529600
0.330000		0.023980	6.512000
0.340000		0.025215	6.963200
0.350000		0.026847	6.736000
0.360000		0.033752	8.528000
0.370000		0.026823	6.849600
0.380000		0.063948	11.396800
0.390000		0.056337	10.520000
0.400000		0.044748	9.152000
0.410000		0.078272	11.936000
0.420000		0.108050	14.436800
0.430000		0.136433	16.609600
0.440000		0.144878	16.523200
0.450000		0.164900	18.254400
0.460000		0.145957	14.659200
0.470000		0.141863	16.617600
0.480000		0.219120	19.009600
0.490000		0.283401	21.641600
0.500000		0.335535	25.203200
0.510000		0.408802	28.347200
0.520000		0.443425	26.968000
0.530000		0.537167	30.144000
0.540000		0.589570	31.640000
0.550000		0.618342	30.649600
0.560000		0.681536	31.364800
0.570000		0.727880	31.046400
0.580000		0.757281	29.731200
0.590000		0.836419	31.486400
0.600000		0.832886	30.544000
0.610000		0.832614	28.651200
0.620000		0.906330	29.731200
0.630000		0.918609	29.356800
0.640000		0.939810	27.860800
0.650000		0.873624	25.680000
0.660000		0.957839	25.804800
0.670000		0.957911	24.963200
0.680000		0.939256	24.547200
0.690000		0.971437	24.856000
0.700000		0.950187	23.936000
0.710000		0.980844	23.878400
0.720000		0.979890	23.937600
0.730000		0.962582	23.513600
0.740000		0.986699	23.364800
0.750000		0.967816	22.361600
0.760000		0.990380	23.145600
0.770000		0.992517	23.006400
0.780000		0.992778	22.864000
0.790000		0.995220	22.430400
0.800000		0.994927	22.475200
0.810000		0.996022	22.251200
0.820000		0.997385	22.243200
0.830000		0.997049	22.246400
0.840000		0.997518	22.289600
0.850000		0.997698	22.121600
0.860000		0.998240	22.084800
0.870000		0.998356	22.057600
0.880000		0.999146	22.201600
0.890000		0.999415	22.068800
0.900000		0.999631	22.059200
0.910000		0.999507	22.030400
0.920000		0.999791	22.044800
0.930000		0.999908	22.022400
0.940000		0.999992	22.096000
0.950000		0.999940	22.025600
0.960000		0.999828	22.046400
0.970000		1.000000	22.000000
0.980000		1.000000	22.000000
0.990000		1.000000	22.000000
1.000000		1.000000	22.000000
Finished in time 2.304676 secs.
ajs94@kay:~/CS374/Homework3/firestarter$ exit

Script done on Fri 29 Sep 2017 11:07:23 AM EDT
