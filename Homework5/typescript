Script started on Tue 24 Oct 2017 03:22:39 PM EDT
ajs94@wirth:~/CS374/Homework5$ make
mpicc -Wall -c -ansi -pedantic -std=c99 calcPI.c
mpicc calcPI.o integral.o -o calcPI -lm
ajs94@wirth:~/CS374/Homework5$ makepirun -np 8 ./calcPI 10000000[Kake[Kpirun -np 8 ./calcPI 1000000ake[Kpirun -np 8 ./calcPI 1000000ake[Kpirun -np 8 ./calcPI 1000000ake[Kpirun -np 8 ./calcPI 1000000ake[Kpirun -np 8 ./calcPI 1000000ake[Kpirun -np 8 ./calcPI 1000000ake[Kpirun -np 8 ./calcPI 10000000ake[K[Kmakepirun -np 8 ./calcPI 10000000ake[K[Kmakepirun -np 8 ./calcPI 10000000ake[K[Kmakepirun -np 8 ./calcPI 100000008[1P[1@1[1@6[1P[1P[1@3[1@2 [1@ [1@-[1@m[1@a[1@c[1@h[1@i[1@n[1@e[1@f[1@i[1@l[1@e [1@ [1@h[1@o[1@st ./calcPI 10000000 [Ajs94@wirth:~/CS374/Homework5$ mpirun -np 32 -machinefile hosts ./calcPI 1
0[Ajs94@wirth:~/CS374/Homework5$ mpirun -np 32 -machinefile hosts ./calcPI 100000
00[Aajs94@wirth:~/CS374/Homework5$ mpirun -np 32 -machinefile hosts ./calcPI 100000000
000  
Time: 0.048091
Using 10000000 trapezoids, the approximate vs actual values of PI are:
3.141592653552605278553105927486
3.141592653589793238512808959406
ajs94@wirth:~/CS374/Homework5$ cat calcPI.c
/* calcPi.c calculates PI using the integral of the unit circle.
 * Since the area of the unit circle is PI, 
 *  PI = 4 * the area of a quarter of the unit circle 
 *    (i.e., its integral from 0.0 to 1.0)
 *
 * Joel Adams, Fall 2013 for CS 374 at Calvin College.
 * Edited by Aaron Santucci for CS 374, October 2017
 * 		to calculate PI in parallel using MPI 
 */

#include <mpi.h>
#include "integral.h"   // integrate()
#include <stdio.h>      // printf(), etc.
#include <stdlib.h>     // exit()
#include <math.h>       // sqrt() 


/* function for unit circle (x^2 + y^2 = 1)
 * parameter: x, a double
 * return: sqrt(1 - x^2)
 */
double f(double x) {
   return sqrt(1.0 - x*x);
}

/* retrieve desired number of trapezoids from commandline arguments
 * parameters: argc: the argument count
 *             argv: the argument vector
 * return: the number of trapezoids to be used.
 */            
unsigned long long processCommandLine(int argc, char** argv) {
   if (argc == 1) {
       return 1;
   } else if (argc == 2) {
//       return atoi( argv[1] );
       return strtoull( argv[1], 0, 10 );
   } else {
       fprintf(stderr, "Usage: ./calcPI [numTrapezoids]");
       exit(1);
   }
}
 

int main(int argc, char** argv) 
{
	// variables
	int id = -1;
	int numProcesses = -1;
	long double totalPI = 0;
	const long double REFERENCE_PI = 3.141592653589793238462643383279L;
	unsigned long long numTrapezoids = processCommandLine(argc, argv); 
	
	// MPI time
	double startTime = 0.0, totalTime = 0.0;
	startTime = MPI_Wtime();
	
	// MPI Init
	MPI_Init(&argc, &argv); 
	MPI_Comm_rank(MPI_COMM_WORLD, &id);
	MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

	long double approximatePI = 0;

	approximatePI = integrateTrap( (double)id / numProcesses, (double)(id+1) / numProcesses, numTrapezoids/numProcesses) * 4.0;
		
	MPI_Reduce(&approximatePI, &totalPI, 1, MPI_LONG_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

	if ( id == 0 )
	{
		totalTime = MPI_Wtime() - startTime;
		printf("Time: %f\nUsing %llu trapezoids, the approximate vs actual values of PI are:\n%.30Lf\n%.30Lf\n",
				totalTime, numTrapezoids, totalPI, REFERENCE_PI);
	}
	
	MPI_Finalize();
	return 0;
}

ajs94@wirth:~/CS374/Homework5$ cat integral.c
/* integral.c defines integrateTrap(), a function to approximate
 *  definite integrals using the trapezoidal rule. 
 *
 * Joel Adams, Fall 2013.
 */

#include "integral.h"

/* declaration of the function to be integrated,
 * which must be defined in the caller of integrate()
 * or a linking error will occur
 */
extern double f(double x); 

/* function to approximate an integral:
 * parameters: xLo, the left endpoint
 *             xHi, the right endpoint
 *             numTrapezoids, the number of trapezoids to use
 * return: the approximate integral of f(x) from x1 to x2.
 */
long double integrateTrap(double xLo, double xHi,
                           unsigned long long numTrapezoids) {
   long double delta = (xHi - xLo) / numTrapezoids;
   long double result = 0;
   unsigned long long i = 0;

   result = (f(xLo) + f(xHi)) * 0.5;
   for (i = 1; i < numTrapezoids; i++) {
     result += f(xLo + i*delta);
   }
   result *= delta;

   return result;
} 

/* Note: The integral is approximately
 *   delta * (f(xLo) + f(x1)) / 2
 * + delta * (f(x1) + f(x2)) / 2
 * + delta * (f(x2) + f(x3)) / 2
 * ...
 * + delta * (f(x[n-2] + f(x[n-1]) / 2
 * + delta * (f(x[n-1]) + f(x[n])) / 2
 */

ajs94@wirth:~/CS374/Homework5$ exit

Script done on Tue 24 Oct 2017 03:24:08 PM EDT
